#! /usr/bin/env python3
# -*- coding: utf-8 -*-

# (c) 2013 Marcos Dione <mdione@grulic.org.ar>
# for licensing details see the file LICENSE.txt

import os
import sys
import sh
import importlib
import builtins

class Runner (sh.Command):
    # this class changes the behaviour of sh.Command
    # so is more shell scripting freindly
    def __init__ (self, *args, **kwargs):
        super ().__init__ (*args, **kwargs)

def polute (d):
    # these functions will be loaded from each module and put in the globals
    builtins= {
        'os': [ 'chdir', 'getcwd', 'uname', 'chmod', 'chown', 'link', 'listdir',
                'mkdir', 'remove' ],
        'time': [ 'sleep', ],
        'sys': [ 'argv', 'exit' ],

        'ayrton.file_test': [ '_a', '_b', '_c', '_d', '_e', '_f', '_g', '_h',
                              '_k', '_p', '_r', '_s', '_u', '_w', '_x', '_L',
                              '_N', '_S', '_nt', '_ot' ],
        }

    for module, functions in builtins.items ():
        m= importlib.import_module (module)
        for function in functions:
            d[function]= getattr (m, function)

class Globals (dict):
    def __init__ (self):
        super ().__init__ ()
        polute (self)

    def __getitem__ (self, k):
        try:
            ans= getattr (builtins, k)
        except AttributeError:
            try:
                ans= super ().__getitem__ (k)
            except KeyError:
                ans= Runner (k)

        return ans

class Locals (dict):
    def __init__ (self):
        super ().__init__ ()
        self.update (os.environ)

if __name__=='__main__':
    s= compile (open (sys.argv[1]).read (), sys.argv[1], 'exec')
    g= Globals ()
    # l= Locals ()

    # remove ayrton from the arguments
    sys.argv.pop (0)

    # fire!
    exec (s, g)
