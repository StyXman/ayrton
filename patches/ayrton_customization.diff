--- a/ayrton/parser/astcompiler/astbuilder.py
+++ b/ayrton/parser/astcompiler/astbuilder.py
@@ -1256,15 +1256,20 @@
                 expr_node = argument.children[0]
                 if len(argument.children) == 1:
                     # a positional argument
-                    if keywords:
-                        if doublestars_count:
-                            self.error("positional argument follows "
-                                       "keyword argument unpacking",
-                                       expr_node)
-                        else:
-                            self.error("positional argument follows "
-                                       "keyword argument",
-                                       expr_node)
+
+                    # we disable these checks so we can get
+                    # grep(quiet=True, **user_args, '/etc/passwd')
+                    # they will be converted to o()'s later
+
+                    # if keywords:
+                    #     if doublestars_count:
+                    #         self.error("positional argument follows "
+                    #                    "keyword argument unpacking",
+                    #                    expr_node)
+                    #     else:
+                    #         self.error("positional argument follows "
+                    #                    "keyword argument",
+                    #                    expr_node)
                     args.append(self.handle_expr(expr_node))
                 elif expr_node.type == tokens.STAR:
                     # an iterable argument unpacking
@@ -1301,7 +1306,16 @@
                     used_keywords[keyword] = None
                     self.check_forbidden_name(keyword, expr_node)
                     keyword_value = self.handle_expr(argument.children[2])
-                    keywords.append(ast.keyword(keyword, keyword_value))
+                    if keyword in Command.supported_options:
+                        keywords.append(ast.keyword(keyword, keyword_value))
+                    else:
+                        kw = ast.keyword(keyword, keyword_value)
+                        kw.lineno = keyword_node.lineno
+                        name = ast.Name ('o', ast.Load())
+                        name.lineno = keyword_node.lineno
+                        arg = ast.Call(name, [], [ kw ], None, None)
+                        arg.lineno = keyword_node.lineno
+                        args.append(arg)
             i += 1
         if not args:
             args = []
